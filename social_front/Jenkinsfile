pipeline {
    agent any
    tools {
        nodejs "NODEJS_HOME"  // Assurez-vous que Node.js est configuré dans Jenkins
    }
    environment {
        // Définir les variables d'environnement nécessaires
        CACHE_DIR = "${env.WORKSPACE}/.npm"
        IMAGE_TAG = "1.0"
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout du code source
                git branch: 'master', 
                    credentialsId: 'git-credentials',   
                    url: 'https://github.com/MellouliiAhmed/SocialMedia_MernApp.git'
                script {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                    echo "Changed files: ${changes}"
                    if (!changes.contains('social_front/')) {
                        currentBuild.result = 'ABORTED'
                        error('No changes in the frontend directory.')
                    }
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    // Naviguer dans le répertoire frontend
                    dir('social_front/') {
                        sh 'echo $CACHE_DIR'
                        // Créer le répertoire de cache si inexistant
                        sh 'mkdir -p $CACHE_DIR'
                        // Configurer npm pour utiliser le répertoire de cache
                        sh 'npm config set cache $CACHE_DIR --global'
                        // Installation des dépendances avec gestion du cache
                        sh 'npm ci --force'
                    }
                }
            }
        }
        stage('Test Frontend') {
            steps {
                script {
                    // Naviguer dans le répertoire frontend et construire le projet
                    dir('social_front/') {
                        // sh 'npm run Test'
                        sh 'echo "test the code"'
                    }
                }
            }
        }
        
        stage('Build Frontend Image') {
            steps {
                script {
                    // env.IMAGE_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    IMAGE_TAG = "2.0"
                    echo "${IMAGE_TAG}"
                    // Naviguer dans le répertoire frontend et construire le projet
                    dir('social_front/') {
                        // sh 'npm run Test
                        // def imageTag="1.0"
                        sh "docker image build -t mellouliiahmed/cloverfield-frontend:${IMAGE_TAG} ."
                        sh "docker images"
                    }
                }
            }
        }
        
        stage('Push Frontend image to DockerHub') {
            steps {
                script {
                    dir('social_front/') {
                        withCredentials([string(credentialsId: 'dockerhub-PWD', variable: 'DOCKERHUBPWD')]) {
                            sh 'docker login -u mellouliiahmed -p ${DOCKERHUBPWD} docker.io'
                            sh 'docker image push mellouliiahmed/cloverfield-frontend:${IMAGE_TAG}'
                        }
                    }
                }
            }
        }
        
    }
    post {
        always {
            // Actions à effectuer après toutes les étapes, succès ou échec
            script {
                dir('social_front/') {
                    sh 'docker rmi -f mellouliiahmed/cloverfield-backend:${IMAGE_TAG}'
                    // Exemple : nettoyer les fichiers temporaires ou d'autres actions post-build
                    sh 'rm -rf node_modules'
                }
            }
        }
        success {
            // Actions à effectuer uniquement en cas de succès
            echo 'Build réussi!'
        }
        failure {
            // Actions à effectuer uniquement en cas d'échec
            echo 'Build échoué.'
        }
    }
}
